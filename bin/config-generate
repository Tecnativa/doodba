#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Generate Odoo server configuration from templates"""

import os
import sys
from contextlib import closing
from string import Template

from doodbalib import logger, ODOO_DIR

try:
    # Python 2, where io.StringIO fails because it is unicode-only
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    from odoo.tools.config import configmanager
except ImportError:
    # For non-pip installations
    sys.path.append(ODOO_DIR)
    from odoo.tools.config import configmanager

try:
    from configparser import RawConfigParser

    parser = RawConfigParser(strict=False)
except ImportError:
    # Python 2, where strict=True doesn"t exist
    from ConfigParser import RawConfigParser

    parser = RawConfigParser()

ODOO_VERSION = os.environ.get("ODOO_VERSION")
TARGET_FILE = os.environ.get("ODOO_RC", "/opt/odoo/auto/odoo.conf")
CONFIG_DIRS = ("/opt/odoo/common/conf.d", "/opt/odoo/custom/conf.d")

# Read all configuration files found in those folders
logger.info("Merging found configuration files in %s", TARGET_FILE)
for dir_ in CONFIG_DIRS:
    try:
        for file_ in sorted(os.listdir(dir_)):
            parser.read(os.path.join(dir_, file_))
    except OSError:  # TODO Use FileNotFoundError when we drop python 2
        continue


# Add configuration parameters sent via env vars
logger.info("Updating configuration file with set environment variables")
odoo_cfg = configmanager()
cfg_env_prefix = "ODOO_CFG_"

for k, val in os.environ.items():
    if not val or not k.startswith(cfg_env_prefix):
        continue

    parameter = k.split(cfg_env_prefix)[1].lower()
    if parameter in odoo_cfg.options:
        parser.set("options", parameter, val)

# Warn user about all invalid parameters
invalid_params = set(parser.options) - set(odoo_cfg.options)
for param in invalid_params:
    logger.warning("'%s' is not a valid Odoo configuration parameter")

# Write it to a memory string object
with closing(StringIO()) as resultfp:
    parser.write(resultfp)
    resultfp.seek(0)
    # Obtain the config string
    result = resultfp.read()
    # Expand environment variables found within
    result = Template(result).substitute(os.environ)
    logger.debug("Resulting configuration:\n%s", result)
    # Write it to destination
    with open(TARGET_FILE, "w") as targetfp:
        targetfp.write(result)
